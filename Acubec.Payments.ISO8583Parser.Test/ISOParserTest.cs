using Acubec.Payments.ISO8583Parser.Definitions;
using Acubec.Payments.ISO8583Parser.Helpers;
using Microsoft.Extensions.DependencyInjection;
using Moq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using Xunit;

namespace Acubec.Payments.ISO8583Parser.Test;

public class ISOParserTest: IClassFixture<ISO8583ParserTestFixture>
{
    readonly IServiceProvider _serviceProvider;

    public ISOParserTest(ISO8583ParserTestFixture fixture)
	{
        _serviceProvider = fixture.ServiceProvider;
    }


    [Fact]
    public void Parse_ShouldParsenIsoMessage()
    {
        // Arrange
        var jsonConfiguration = File.ReadAllText(@"D:\Ajay\Projects\Self\Git\Acubec.Payments.ISO8583Parser\Acubec.Payments.ISO8583Parser.Test\RupaySchema.json");
        JsonSerializerOptions options = new();
        options.PropertyNameCaseInsensitive = true;
        var configuration = System.Text.Json.JsonSerializer.Deserialize<SchemaConfiguration>(jsonConfiguration, options);
        
        var mockServiceProvider = new Mock<IServiceProvider>();
        


        var parser = new ISO8583MessageParser(_serviceProvider);
        var strMessageBytes
        var messageBytes = ByteHelper.GetBytesFromHexString(strMessageBytes);

        // Act
        var result = parser.Parse(configuration, messageBytes, _serviceProvider);
        
        // Assert
        Assert.NotNull(result);
        // Add more assertions as needed
    }

    [Fact]
    public void Parse_ShouldConvertToStringIsoMessage()
    {
        // Arrange
        var jsonConfiguration = File.ReadAllText(@"D:\Ajay\Projects\Self\Git\Acubec.Payments.ISO8583Parser\Acubec.Payments.ISO8583Parser.Test\RupaySchema.json");
        JsonSerializerOptions options = new();
        options.PropertyNameCaseInsensitive = true;
        var configuration = System.Text.Json.JsonSerializer.Deserialize<SchemaConfiguration>(jsonConfiguration, options);


        var parser = new ISO8583MessageParser(_serviceProvider);
        var strMessageBytes
        //var strMessageBytes

        var messageBytes = ByteHelper.GetBytesFromHexString(strMessageBytes);
        var isoMessage = parser.Parse(configuration, messageBytes, _serviceProvider);

        // Act
        var result = parser.ToBytes(isoMessage,configuration.SchemaEncoding);
        var resultString = ByteHelper.GetHexRepresentation(result);
        // Assert
        Assert.NotNull(result);
        Assert.Equal(strMessageBytes, resultString);
    }
}
